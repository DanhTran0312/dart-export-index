{"version":3,"sources":["webpack://dart-export-index/./src/commands/commands.ts","webpack://dart-export-index/./src/commands/index.ts","webpack://dart-export-index/./src/extension.ts","webpack://dart-export-index/./src/utils/editor-helper.ts","webpack://dart-export-index/./src/utils/errors.ts","webpack://dart-export-index/./src/utils/file-manager.ts","webpack://dart-export-index/external \"fs\"","webpack://dart-export-index/external \"path\"","webpack://dart-export-index/external \"vscode\"","webpack://dart-export-index/webpack/bootstrap","webpack://dart-export-index/webpack/startup"],"names":["isDart","exportFileName","addCurrentFileToIndexDart","filePath","getFilePath","ApplicationError","match","indexFilePath","getIndexPath","createFileIfNotExists","exportationLine","getExportationLine","writeLineAndSort","err","vscode","window","showErrorMessage","message","addCurrentFileToIndexDartDirName","getDirNamePath","exportDartFilesInCurrentDirectory","files","getCurrentDirectoryDartFiles","clearFile","forEach","f","exportDartFilesInCurrentDirectoryDirName","path","basename","fileIsOpened","fileIsSaved","getCurrentFilePath","dirPath","dirname","listFiles","filter","join","elements","split","dirName","length","line","lines","getLines","l","includes","push","sort","written","writeFile","context","addCurrentFile","commands","registerCommand","addCurrentFileDirName","exportAllFiles","exportAllFilesDirName","subscriptions","activeTextEditor","editor","undefined","document","isUntitled","fileName","name","this","fileExists","fs","existsSync","createFile","FileAlreadyExistsError","appendFileSync","readdirSync","writeFileSync","readFileSync","data","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"extension.js","sourcesContent":["import * as path from 'path';\nimport * as vscode from 'vscode';\nimport {\n  fileIsOpened,\n  fileIsSaved,\n  getCurrentFilePath,\n} from '../utils/editor-helper';\nimport { ApplicationError } from '../utils/errors';\nimport {\n  createFileIfNotExists,\n  clearFile,\n  getLines,\n  writeFile,\n  listFiles,\n} from '../utils/file-manager';\n\nconst isDart = /\\.dart?$/g;\nconst exportFileName = 'index.dart';\n\nexport const addCurrentFileToIndexDart = () => {\n  try {\n    const filePath = getFilePath();\n\n    if (filePath === null) {\n      throw new ApplicationError('Could not get current file path');\n    }\n\n    if (!filePath.match(isDart)) {\n      throw new ApplicationError('The file is not Dart file.');\n    }\n\n    const indexFilePath = getIndexPath(filePath);\n\n    if (filePath === indexFilePath) {\n      throw new ApplicationError('The file is the index file itself.');\n    }\n\n    createFileIfNotExists(indexFilePath);\n\n    const exportationLine = getExportationLine(filePath);\n    writeLineAndSort(indexFilePath, exportationLine);\n  } catch (err) {\n    if (err instanceof ApplicationError) {\n      vscode.window.showErrorMessage(err.message);\n      return;\n    }\n\n    throw err;\n  }\n};\n\nexport const addCurrentFileToIndexDartDirName = () => {\n  try {\n    const filePath = getFilePath();\n\n    if (filePath === null) {\n      throw new ApplicationError('Could not get current file path');\n    }\n\n    if (!filePath.match(isDart)) {\n      throw new ApplicationError('The file is not Dart file.');\n    }\n\n    const indexFilePath = getDirNamePath(filePath);\n\n    if (filePath === indexFilePath) {\n      throw new ApplicationError('The file is the index file itself.');\n    }\n\n    createFileIfNotExists(indexFilePath);\n\n    const exportationLine = getExportationLine(filePath);\n    writeLineAndSort(indexFilePath, exportationLine);\n  } catch (err) {\n    if (err instanceof ApplicationError) {\n      vscode.window.showErrorMessage(err.message);\n      return;\n    }\n\n    throw err;\n  }\n};\n\nexport const exportDartFilesInCurrentDirectory = () => {\n  try {\n    const files = getCurrentDirectoryDartFiles();\n    const filePath = getFilePath();\n    if (filePath === null) {\n      throw new ApplicationError('Could not get current file path');\n    }\n    const indexFilePath = getIndexPath(filePath);\n    createFileIfNotExists(indexFilePath);\n    clearFile(indexFilePath);\n\n    files.forEach((f) => {\n      if (f === exportFileName) {\n        return;\n      }\n      const exportationLine = getExportationLine(f);\n      writeLineAndSort(indexFilePath, exportationLine);\n    });\n\n  } catch (err) {\n    if (err instanceof ApplicationError) {\n      vscode.window.showErrorMessage(err.message);\n      return;\n    }\n\n    throw err;\n  }\n};\n\nexport const exportDartFilesInCurrentDirectoryDirName = () => {\n  try {\n    const files = getCurrentDirectoryDartFiles();\n    const filePath = getFilePath();\n    if (filePath === null) {\n      throw new ApplicationError('Could not get current file path');\n    }\n    const indexFilePath = getDirNamePath(filePath);\n    createFileIfNotExists(indexFilePath);\n    clearFile(indexFilePath);\n\n    files.forEach((f) => {\n      if (f === exportFileName || f === path.basename(indexFilePath)) {\n        return;\n      }\n      const exportationLine = getExportationLine(f);\n      writeLineAndSort(indexFilePath, exportationLine);\n    });\n\n  } catch (err) {\n    if (err instanceof ApplicationError) {\n      vscode.window.showErrorMessage(err.message);\n      return;\n    }\n\n    throw err;\n  }\n};\n\nconst getFilePath = (): string | null => {\n  if (!fileIsOpened()) {\n    throw new ApplicationError('No file is opened.');\n  }\n\n  if (!fileIsSaved()) {\n    throw new ApplicationError('The file is not saved yet.');\n  }\n\n  return getCurrentFilePath();\n};\n\nconst getCurrentDirectoryDartFiles = (): string[] => {\n  if (!fileIsOpened()) {\n    throw new ApplicationError('No file is opened.');\n  }\n\n  if (!fileIsSaved()) {\n    throw new ApplicationError('The file is not saved yet.');\n  }\n\n  const filePath = getCurrentFilePath();\n  if (filePath === null) {\n    throw new ApplicationError('Could not get current file path');\n  }\n  const dirPath = path.dirname(filePath);\n\n  const files = listFiles(dirPath);\n  const dartFiles = files.filter((f) => f.match(isDart));\n  return dartFiles;\n};\n\nconst getIndexPath = (filePath: string): string => {\n  const dirPath = path.dirname(filePath);\n  return path.join(dirPath, `${exportFileName}`);\n};\n\nconst getDirNamePath = (filePath: string): string => {\n  const dirPath = path.dirname(filePath);\n  const elements = dirPath.split('/');\n  const dirName = elements[elements.length - 1];\n  return path.join(dirPath, `${dirName}.dart`);\n};\n\nconst getExportationLine = (filePath: string): string => {\n  const fileName = path.basename(filePath);\n  return `export '${fileName}';`;\n};\n\nconst writeLineAndSort = (filePath: string, line: string): void => {\n  const lines = getLines(filePath).filter(l => l !== '');\n\n  if (!lines.includes(line)) {\n    lines.push(line);\n  }\n\n  lines.sort();\n  const written = `${lines.join('\\n')}\\n`;\n\n  writeFile(filePath, written);\n};","export * from './commands';\n","import * as vscode from 'vscode';\nimport * as commands from './commands';\n\nexport function activate(context: vscode.ExtensionContext) {\n  const addCurrentFile = vscode.commands.registerCommand(\n    'extension.addCurrentFileToIndexDart',\n    () => {\n      commands.addCurrentFileToIndexDart();\n    },\n  );\n\n  const addCurrentFileDirName = vscode.commands.registerCommand(\n    'extension.addCurrentFileToIndexDartDirName',\n    () => {\n      commands.addCurrentFileToIndexDartDirName();\n    },\n  );\n\n  const exportAllFiles = vscode.commands.registerCommand(\n    'extension.exportDartFilesInCurrentDirectory',\n    () => {\n      commands.exportDartFilesInCurrentDirectory();\n    },\n  );\n\n  const exportAllFilesDirName = vscode.commands.registerCommand(\n    'extension.exportDartFilesInCurrentDirectoryDirName',\n    () => {\n      commands.exportDartFilesInCurrentDirectoryDirName();\n    },\n  );\n\n  context.subscriptions.push(addCurrentFile);\n  context.subscriptions.push(addCurrentFileDirName);\n  context.subscriptions.push(exportAllFiles);\n  context.subscriptions.push(exportAllFilesDirName);\n}\n\nexport function deactivate() { }\n","import * as vscode from 'vscode';\nimport { ApplicationError } from './errors';\n\nexport const fileIsOpened = (): boolean => {\n  return !!vscode.window.activeTextEditor;\n};\n\nexport const fileIsSaved = (): boolean => {\n  if (!fileIsOpened) {\n    return false;\n  }\n\n  const editor = vscode.window.activeTextEditor;\n\n  if (editor === undefined) {\n    throw new ApplicationError('No active editor available');\n  }\n\n  const document = editor.document;\n  return !document.isUntitled;\n};\n\nexport const getCurrentFilePath = (): string | null => {\n  if (!(fileIsOpened && fileIsSaved)) {\n    return null;\n  };\n\n  const editor = vscode.window.activeTextEditor;\n\n  if (editor === undefined) {\n    throw new ApplicationError('No active editor available');\n  }\n\n  return editor.document.fileName;\n};\n","export class ApplicationError implements Error {\n  public name = 'ApplicationError';\n\n  constructor(public message: string) { }\n\n  public toString() {\n    return `${this.name}: ${this.message}`;\n  }\n}\n","import * as fs from 'fs';\nimport { ApplicationError } from './errors';\n\nexport const fileExists = (filePath: string): boolean => {\n  return fs.existsSync(filePath);\n};\n\nexport const createFile = (filePath: string): void => {\n  if (fileExists(filePath)) {\n    throw new FileAlreadyExistsError(`${filePath} already exists`);\n  }\n\n  fs.appendFileSync(filePath, '', 'utf-8');\n};\n\nexport const listFiles = (dirPath: string): string[] => {\n  return fs.readdirSync(dirPath);\n};\n\nexport const createFileIfNotExists = (filePath: string): void => {\n  if (fileExists(filePath)) {\n    return;\n  }\n\n  createFile(filePath);\n};\n\nexport const clearFile = (filePath: string): void => {\n  if (fileExists(filePath)) {\n    fs.writeFileSync(filePath, '');\n  }\n};\n\nexport const getLines = (filePath: string): string[] => {\n  return fs.readFileSync(filePath, 'utf-8').split('\\n');\n};\n\nexport const writeFile = (filePath: string, data: string): void => {\n  fs.writeFileSync(filePath, data);\n};\n\nexport class FileAlreadyExistsError extends ApplicationError { }\n","module.exports = require(\"fs\");;","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}